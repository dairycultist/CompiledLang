const { createServer } = require('node:http');

const hostname = "localhost";
const port = 3000;

const colorDim = "\x1b[2m";
const colorReset = "\x1b[0m";
const colorValue = "\x1b[32m";
const colorError = "\x1b[31m";

/*
 * helper functions
 */
function urlMatchesTemplate(url, template) {

    return url == template;
}

function respond(res, statusCode, contentType, content, logMessage) {

    // respond
    res.writeHead(statusCode, { "Content-Type": contentType });
    res.end(content);

    // log response
    if (res.statusCode == 200) {

        console.log(`${colorDim}<= [200]: ${logMessage}${colorReset}`);
    } else {
        console.log(`${colorDim}<= [${colorReset + colorError}${res.statusCode}${colorReset + colorDim}]: ${colorReset + colorError}${logMessage}${colorReset}`);
    }
}


/*
 * generated by OCaml from WSAS
 */

function processGET(req, res) {

    if (urlMatchesTemplate(req.url, "/")) {
        respond(res, 200, "text/plain", "Hello World", "Serving index.");
    } else {
        respond(res, 404, "text/plain", "404", "Could not locate URL.");
    }
}

/*
 * generic servercode
 */
const server = createServer((req, res) => {

    // log request
    console.log(`${colorDim}=> ${colorReset + colorValue}${req.method} ${req.url}${colorReset}`);
    
    switch (req.method) {

        case "GET": processGET(req, res); break;
        // TODO HEAD, POST
        
        default:
            respond(res, 501, "text/plain", // 501 = Not Implemented
                `WSAS is currently unable to process ${req.method} requests.`,
                `WSAS is currently unable to process ${req.method} requests.`
            );
            break;
    }
});

server.listen(port, hostname, () => {

    console.log(`${colorDim}Started WSAS (a1.0) server @ ${colorReset + colorValue}http://${hostname}:${port}/${colorReset}`);
});