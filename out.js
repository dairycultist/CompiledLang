const { createServer } = require('node:http');

const colorDim = "\x1b[2m";
const colorReset = "\x1b[0m";
const colorValue = "\x1b[32m";
const colorError = "\x1b[31m";

const hostname = "127.0.0.1";
const port = 3000;

/*
 * helper functions
 */
function urlMatchesTemplate(url, template) {

    if (url == template) {

        console.log(`${colorDim} Â· Matches "${template}"`);
        return true;

    } else {
        return false;
    }
}

function respond(res, statusCode, contentType, content, logMessage) {

    // respond
    res.writeHead(statusCode, { "Content-Type": contentType });
    res.end(content);

    // log response
    if (res.statusCode == 200) {

        console.log(`${colorDim}<= [200]: ${logMessage}${colorReset}`);
    } else {
        console.log(`${colorDim}<= [${colorReset + colorError}${res.statusCode}${colorReset + colorDim}]: ${colorReset + colorError}${logMessage}${colorReset}`);
    }
}

/*
 * actual servercode
 */
const server = createServer((req, res) => {

    // log request
    console.log(`${colorDim}=> ${colorReset + colorValue}${req.method} ${req.url}${colorReset}`);
    
    /*
    * generated by OCaml from WSAS
    */
    if (req.method == "GET" && urlMatchesTemplate(req.url, "/"))
    {
        console.log("hello")
        respond(res, 200, "text/plain", "Hello world!", "Message");
    } else
    if (req.method == "GET" && urlMatchesTemplate(req.url, "/cat"))
    {
        console.log("meow")
        respond(res, 200, "text/plain", "Hello cat!", "Message cat");
    } else
    {
        respond(res, 400, "text/plain", "Error 400: Bad request.", "Bad request.");
    }
});

server.listen(port, hostname, () => {

    console.log(`${colorDim}Started WSAS (a1.0) server @ ${colorReset + colorValue}http://${hostname}:${port}/${colorReset}`);
});
